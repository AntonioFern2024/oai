/*
 * Copyright 2022 Sequans Communications.
 *
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.0  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#include "msg.sidl"

// SIDL common TTCN types and definitions.
#include "TtcnCommon.sidl"

// Interface name.
METADATA_VAR(itf_name, "NrSysSrb");

// Restricted RATs.
METADATA_VAR(rats, "NR");

// TTCN namespaces.
METADATA_VAR(namespaces, "NasEmu5G_AspTypes_NR");

// Internal non-TTCN types.
METADATA_VAR(internal, "NR_RRC_MSG_Request_Type NR_RRC_MSG_Indication_Type");

SIDL_UNION_ENUM(NR_RRC_MSG_Request_Type) {
	NR_RRC_MSG_Request_Type_UNBOUND_VALUE,
	NR_RRC_MSG_Request_Type_Ccch,
	NR_RRC_MSG_Request_Type_Dcch
};
SIDL_UNION_BEGIN(NR_RRC_MSG_Request_Type) {
	SIDL_UNION_CASE(NR_RRC_MSG_Request_Type_Ccch)
		SIDL_DYNAMIC_WITH_PFX(NR_RRC_MSG_Request_Type, uint8_t, Ccch);
	SIDL_UNION_CASE(NR_RRC_MSG_Request_Type_Dcch)
		SIDL_DYNAMIC_WITH_PFX(NR_RRC_MSG_Request_Type, uint8_t, Dcch);
} SIDL_UNION_END;

SIDL_UNION_ENUM(NR_RRC_MSG_Indication_Type) {
	NR_RRC_MSG_Indication_Type_UNBOUND_VALUE,
	NR_RRC_MSG_Indication_Type_Ccch,
	NR_RRC_MSG_Indication_Type_Ccch1,
	NR_RRC_MSG_Indication_Type_Dcch
};
SIDL_UNION_BEGIN(NR_RRC_MSG_Indication_Type) {
	SIDL_UNION_CASE(NR_RRC_MSG_Indication_Type_Ccch)
		SIDL_DYNAMIC_WITH_PFX(NR_RRC_MSG_Indication_Type, uint8_t, Ccch);
	SIDL_UNION_CASE(NR_RRC_MSG_Indication_Type_Ccch1)
		SIDL_DYNAMIC_WITH_PFX(NR_RRC_MSG_Indication_Type, uint8_t, Ccch1);
	SIDL_UNION_CASE(NR_RRC_MSG_Indication_Type_Dcch)
		SIDL_DYNAMIC_WITH_PFX(NR_RRC_MSG_Indication_Type, uint8_t, Dcch);
} SIDL_UNION_END;

struct NR_RRC_PDU_REQ {
	struct NR_ReqAspCommonPart_Type Common;
	struct NR_RRC_MSG_Request_Type RrcPdu;
};

struct NR_RRC_PDU_IND {
	struct NR_IndAspCommonPart_Type Common;
	struct NR_RRC_MSG_Indication_Type RrcPdu;
};

ONEWAY ProcessFromSS(const struct NR_RRC_PDU_REQ* FromSS);
NOTIFY ProcessToSS(struct NR_RRC_PDU_IND* ToSS);
