/*
 * Copyright 2022 Sequans Communications.
 *
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.0  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#pragma once

// SIDL keywords.
#include "msg.sidl"

// SIDL commons.
#include "SidlNrCommon.sidl"

typedef SIDL_DYNAMIC_OF_STRUCT(NR_ASN1_TDD_UL_DL_SlotConfig_Type, NR_TDD_UL_DL_SlotConfigList_Type);

struct NR_TDD_Config_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_TDD_UL_DL_ConfigCommon_Type, Common);
	SIDL_OPTIONAL(NR_TDD_UL_DL_SlotConfigList_Type, Dedicated);
};

struct NR_FDD_Info_Type {
};

SIDL_UNION_ENUM(NR_TDD_Info_Type) {
	NR_TDD_Info_Type_UNBOUND_VALUE,
	NR_TDD_Info_Type_Config,
	NR_TDD_Info_Type_FullFlexible
};
SIDL_UNION_BEGIN(NR_TDD_Info_Type) {
	SIDL_UNION_CASE(NR_TDD_Info_Type_Config)
		struct NR_TDD_Config_Type Config;
	SIDL_UNION_CASE(NR_TDD_Info_Type_FullFlexible)
		Null_Type FullFlexible;
} SIDL_UNION_END;

SIDL_UNION_ENUM(NR_DuplexMode_Type) {
	NR_DuplexMode_Type_UNBOUND_VALUE,
	NR_DuplexMode_Type_FDD,
	NR_DuplexMode_Type_TDD
};
SIDL_UNION_BEGIN(NR_DuplexMode_Type) {
	SIDL_UNION_CASE(NR_DuplexMode_Type_FDD)
		struct NR_FDD_Info_Type FDD;
	SIDL_UNION_CASE(NR_DuplexMode_Type_TDD)
		struct NR_TDD_Info_Type TDD;
} SIDL_UNION_END;

struct NR_CellConfigPhysicalLayerCommon_Type {
	SIDL_OPTIONAL(ASN_NR_NAME(PhysCellId), PhysicalCellId);
	SIDL_OPTIONAL_OF_STRUCT(NR_DuplexMode_Type, DuplexMode);
};

typedef ASN_ENUM(ASN_NR_NAME(ServingCellConfigCommon, ssb_periodicityServingCell)) NR_SSB_Periodicity_Type;

typedef enum {
	NR_SS_BlockPattern_caseA,
	NR_SS_BlockPattern_caseB,
	NR_SS_BlockPattern_caseC,
	NR_SS_BlockPattern_caseD,
	NR_SS_BlockPattern_caseE
} NR_SS_BlockPattern_Type;

typedef struct ASN_NR_NAME(ServingCellConfigCommon, ssb_PositionsInBurst) NR_SSB_PositionsInBurst_Type;

struct NR_SSB_Beam_Type {
	SIDL_OPTIONAL_WITH_PFX(NR_SSB_Beam_Type, int32_t, SsbIndex);
	SIDL_OPTIONAL_WITH_PFX(NR_SSB_Beam_Type, int32_t, Attenuation);
};

typedef SIDL_DYNAMIC_OF_STRUCT(NR_SSB_Beam_Type, NR_SSB_BeamArray_Type);

struct NR_SSB_BurstConfig_Type {
	SIDL_OPTIONAL(NR_SS_BlockPattern_Type, BlockPattern);
	SIDL_OPTIONAL(NR_SSB_PositionsInBurst_Type, PositionsInBurst);
	SIDL_OPTIONAL(NR_SSB_BeamArray_Type, BeamArray);
};

typedef int32_t NR_EPRE_Ratio_Type;

struct NR_SSB_EPREs_Type {
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PbchToDmrs);
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PssToSss);
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, SssToSsbBeam);
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, DmrsToSss);
};

struct NR_SSB_Config_Type {
	SIDL_OPTIONAL(ASN_ENUM(ASN_NR_NAME(SubcarrierSpacing)), SubCarrierSpacing);
	SIDL_OPTIONAL_WITH_PFX(NR_SSB_Config_Type, int32_t, SubcarrierOffset);
	SIDL_OPTIONAL(NR_SSB_Periodicity_Type, Periodicity);
	SIDL_OPTIONAL_WITH_PFX(NR_SSB_Config_Type, int32_t, HalfFrameOffset);
	SIDL_OPTIONAL_OF_STRUCT(NR_SSB_BurstConfig_Type, BurstConfig);
	SIDL_OPTIONAL_OF_STRUCT(NR_SSB_EPREs_Type, RelativeTxPower);
};

typedef ASN_ENUM(ASN_NR_NAME(MIB, dmrs_TypeA_Position)) NR_PDSCH_DMRS_TypeA_Position_Type;

typedef SIDL_DYNAMIC_OF_STRUCT(NR_ASN1_RateMatchPattern_Type, NR_RateMatchPatternList_Type);
typedef SIDL_DYNAMIC_OF_STRUCT(NR_ASN1_RateMatchPatternLTE_CRS_Type, NR_RateMatchPatternLteCrsList_Type);

struct NR_CellLevelRateMatchPattern_Type {
	SIDL_OPTIONAL(NR_RateMatchPatternList_Type, PatternList);
	SIDL_OPTIONAL(NR_RateMatchPatternLteCrsList_Type, PatternListLteCrs);
};

struct NR_PDSCH_CellLevelConfig_Type {
	SIDL_OPTIONAL(NR_PDSCH_DMRS_TypeA_Position_Type, DMRS_TypeA_Position);
	SIDL_OPTIONAL_OF_STRUCT(NR_CellLevelRateMatchPattern_Type, RateMatchPattern);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_PDSCH_ServingCellConfig_Type, ServingCellConfig);
};

typedef UInt_Type NR_SearchSpaceCandidatePriority_Type;

struct NR_SearchSpaceTypeAndPriority_Type {
	NR_SearchSpaceType_Type Type;
	NR_SearchSpaceCandidatePriority_Type CandidatePriority;
};

typedef SIDL_DYNAMIC_OF_STRUCT(NR_SearchSpaceTypeAndPriority_Type, NR_SearchSpaceTypeAndPriorityList_Type);

typedef enum {
	NR_PDCCH_CCE_AggregationLevel_AggregationLevel1,
	NR_PDCCH_CCE_AggregationLevel_AggregationLevel2,
	NR_PDCCH_CCE_AggregationLevel_AggregationLevel4,
	NR_PDCCH_CCE_AggregationLevel_AggregationLevel8,
	NR_PDCCH_CCE_AggregationLevel_AggregationLevel16
} NR_PDCCH_CCE_AggregationLevel_Type;

struct NR_BWP_SearchSpaceConfig_Type {
	NR_SearchSpaceTypeAndPriorityList_Type TypeAndPriorityList;
	NR_PDCCH_CCE_AggregationLevel_Type AggregationLevel;
	struct NR_ASN1_SearchSpace_Type SearchSpaceConfigAtUE;
};

typedef SIDL_DYNAMIC_OF_STRUCT(NR_BWP_SearchSpaceConfig_Type, NR_BWP_SearchSpaceList_Type);

typedef SIDL_DYNAMIC_OF_STRUCT(NR_ASN1_ControlResourceSet_Type, NR_BWP_CoresetList_Type);

typedef int32_t NR_EPRE_Ratio_Type;

struct NR_PDCCH_EPREs_Type {
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PdcchToCell);
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PdcchToDmrs);
};

struct NR_BWP_PDCCH_Configuration_Type {
	SIDL_OPTIONAL(NR_BWP_SearchSpaceList_Type, SearchSpaceArray);
	SIDL_OPTIONAL(NR_BWP_CoresetList_Type, CoresetArray);
	SIDL_OPTIONAL_OF_STRUCT(NR_PDCCH_EPREs_Type, RelativeTxPower);
	SIDL_OPTIONAL_WITH_PFX(NR_BWP_PDCCH_Configuration_Type, int32_t, Coreset0_OffsetRBs);
};

struct NR_PDSCH_EPREs_Type {
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PdschToCell);
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PdschToDmrs);
	SIDL_OPTIONAL(NR_EPRE_Ratio_Type, PdschToPtrs);
};

struct NR_BWP_PDSCH_Configuration_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_PDSCH_ConfigCommon_Type, ConfigCommon);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_PDSCH_Config_Type, ConfigDedicated);
	SIDL_OPTIONAL_OF_STRUCT(NR_PDSCH_EPREs_Type, RelativeTxPower);
};

struct NR_DownlinkBWP_Type {
	SIDL_OPTIONAL_WITH_PFX(NR_DownlinkBWP_Type, ASN_NR_NAME(BWP_Id), Id);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_BWP_Type, BWP);
	SIDL_OPTIONAL_OF_STRUCT(NR_BWP_PDCCH_Configuration_Type, Pdcch);
	SIDL_OPTIONAL_OF_STRUCT(NR_BWP_PDSCH_Configuration_Type, Pdsch);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_SPS_Config_Type, Sps);
};

typedef SIDL_DYNAMIC_OF_STRUCT(NR_DownlinkBWP_Type, NR_DownlinkBWP_List_Type);

struct NR_DownlinkBWPs_Type {
	SIDL_OPTIONAL(ASN_NR_NAME(BWP_Id), ActiveBWP);
	SIDL_OPTIONAL(NR_DownlinkBWP_List_Type, BwpArray);
};

SIDL_UNION_ENUM(NR_CSI_RS_Periodicity_Type) {
	NR_CSI_RS_Periodicity_Type_UNBOUND_VALUE,
	NR_CSI_RS_Periodicity_Type_PeriodicityAndOffset
};
SIDL_UNION_BEGIN(NR_CSI_RS_Periodicity_Type) {
	SIDL_UNION_CASE(NR_CSI_RS_Periodicity_Type_PeriodicityAndOffset)
		struct ASN_NR_NAME(CSI_ResourcePeriodicityAndOffset) PeriodicityAndOffset;
} SIDL_UNION_END;

struct NR_NZP_CSI_RS_Config_Type {
	SIDL_OPTIONAL(ASN_NR_NAME(ScramblingId), ScramblingId);
	SIDL_OPTIONAL_OF_STRUCT(ASN_NR_NAME(CSI_RS_ResourceMapping), ResourceMapping);
	SIDL_OPTIONAL_WITH_PFX(NR_NZP_CSI_RS_Config_Type, int32_t, OffsetToFreqBand);
	SIDL_OPTIONAL_OF_STRUCT(NR_CSI_RS_Periodicity_Type, Periodicity);
	SIDL_OPTIONAL_WITH_PFX(NR_NZP_CSI_RS_Config_Type, int32_t, Attenuation);
};

typedef SIDL_DYNAMIC_OF_STRUCT(NR_NZP_CSI_RS_Config_Type, NR_NZP_CSI_RS_ConfigList_Type);

SIDL_UNION_ENUM(NR_CSI_Config_Type) {
	NR_CSI_Config_Type_UNBOUND_VALUE,
	NR_CSI_Config_Type_CSI_RS,
	NR_CSI_Config_Type_None
};
SIDL_UNION_BEGIN(NR_CSI_Config_Type) {
	SIDL_UNION_CASE(NR_CSI_Config_Type_CSI_RS)
		NR_NZP_CSI_RS_ConfigList_Type CSI_RS;
	SIDL_UNION_CASE(NR_CSI_Config_Type_None)
		Null_Type None;
} SIDL_UNION_END;

struct NR_CellConfigPhysicalLayerDownlink_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_FrequencyInfoDL_Type, FrequencyInfoDL);
	SIDL_OPTIONAL_OF_STRUCT(NR_SSB_Config_Type, SSPbchBlock);
	SIDL_OPTIONAL_OF_STRUCT(NR_PDSCH_CellLevelConfig_Type, PdschCellLevelConfig);
	SIDL_OPTIONAL_OF_STRUCT(NR_DownlinkBWPs_Type, BWPs);
	SIDL_OPTIONAL_OF_STRUCT(NR_CSI_Config_Type, CsiConfig);
};

SIDL_UNION_ENUM(NR_ActiveUplinkBWP_Id_Type) {
	NR_ActiveUplinkBWP_Id_Type_UNBOUND_VALUE,
	NR_ActiveUplinkBWP_Id_Type_Explicit,
	NR_ActiveUplinkBWP_Id_Type_SameIdAsDL
};
SIDL_UNION_BEGIN(NR_ActiveUplinkBWP_Id_Type) {
	SIDL_UNION_CASE(NR_ActiveUplinkBWP_Id_Type_Explicit)
		ASN_NR_NAME(BWP_Id) Explicit;
	SIDL_UNION_CASE(NR_ActiveUplinkBWP_Id_Type_SameIdAsDL)
		Null_Type SameIdAsDL;
} SIDL_UNION_END;

struct NR_UplinkBWP_Type {
	SIDL_OPTIONAL_WITH_PFX(NR_UplinkBWP_Type, ASN_NR_NAME(BWP_Id), Id);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_BWP_UplinkCommon_Type, Common);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_BWP_UplinkDedicated_Type, Dedicated);
};

typedef SIDL_DYNAMIC_OF_STRUCT(NR_UplinkBWP_Type, NR_UplinkBWP_List_Type);

struct NR_UplinkBWPs_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_ActiveUplinkBWP_Id_Type, ActiveBWP);
	SIDL_OPTIONAL(NR_UplinkBWP_List_Type, BwpArray);
};

struct NR_UplinkConfig_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_FrequencyInfoUL_Type, FrequencyInfoUL);
	SIDL_OPTIONAL_OF_STRUCT(NR_UplinkBWPs_Type, BWPs);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_RACH_ConfigDedicated_Type, RACH_ConfigDedicated);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_SI_RequestConfig_Type, SI_RequestConfig);
};

SIDL_UNION_ENUM(NR_Uplink_Type) {
	NR_Uplink_Type_UNBOUND_VALUE,
	NR_Uplink_Type_Config,
	NR_Uplink_Type_None
};
SIDL_UNION_BEGIN(NR_Uplink_Type) {
	SIDL_UNION_CASE(NR_Uplink_Type_Config)
		struct NR_UplinkConfig_Type Config;
	SIDL_UNION_CASE(NR_Uplink_Type_None)
		Null_Type None;
} SIDL_UNION_END;

SIDL_UNION_ENUM(NR_SS_TimingAdvanceConfig_Type) {
	NR_SS_TimingAdvanceConfig_Type_UNBOUND_VALUE,
	NR_SS_TimingAdvanceConfig_Type_InitialValue,
	NR_SS_TimingAdvanceConfig_Type_Relative
};
SIDL_UNION_BEGIN(NR_SS_TimingAdvanceConfig_Type) {
	SIDL_UNION_CASE(NR_SS_TimingAdvanceConfig_Type_InitialValue)
		NR_RACH_TimingAdvance_Type InitialValue;
	SIDL_UNION_CASE(NR_SS_TimingAdvanceConfig_Type_Relative)
		NR_TimingAdvanceIndex_Type Relative;
} SIDL_UNION_END;

struct NR_CellConfigPhysicalLayerUplink_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_Uplink_Type, Uplink);
	SIDL_OPTIONAL_OF_STRUCT(NR_Uplink_Type, SupplementaryUplink);
	SIDL_OPTIONAL_OF_STRUCT(NR_SS_TimingAdvanceConfig_Type, TimingAdvance);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_PUSCH_ServingCellConfig_Type, PUSCH_ServingCellConfig);
	SIDL_OPTIONAL_OF_STRUCT(NR_ASN1_PUSCH_ServingCellConfig_Type, PUSCH_ServingCellConfigSUL);
};

struct NR_CellConfigPhysicalLayer_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_CellConfigPhysicalLayerCommon_Type, Common);
	SIDL_OPTIONAL_OF_STRUCT(NR_CellConfigPhysicalLayerDownlink_Type, Downlink);
	SIDL_OPTIONAL_OF_STRUCT(NR_CellConfigPhysicalLayerUplink_Type, Uplink);
};
