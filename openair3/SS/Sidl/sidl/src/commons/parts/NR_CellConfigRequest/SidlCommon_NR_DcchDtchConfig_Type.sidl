/*
 * Copyright 2022 Sequans Communications.
 *
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.0  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#pragma once

// SIDL keywords.
#include "msg.sidl"

// SIDL commons.
#include "SidlNrCommon.sidl"

struct NR_DcchDtchConfigDL_Type {
	SIDL_OPTIONAL_OF_STRUCT_WITH_PFX(NR_DcchDtchConfigDL_Type, NR_SearchSpaceDlDciAssignment_Type, SearchSpaceAndDci);
};

struct NR_UplinkTimeAlignment_AutoSynch_Type {
	NR_TimingAdvanceIndex_Type TimingAdvance;
	NR_TimingAdvance_Period_Type TA_Period;
};

SIDL_UNION_ENUM(NR_UplinkTimeAlignment_Synch_Type) {
	NR_UplinkTimeAlignment_Synch_Type_UNBOUND_VALUE,
	NR_UplinkTimeAlignment_Synch_Type_None,
	NR_UplinkTimeAlignment_Synch_Type_Auto
};
SIDL_UNION_BEGIN(NR_UplinkTimeAlignment_Synch_Type) {
	SIDL_UNION_CASE(NR_UplinkTimeAlignment_Synch_Type_None)
		Null_Type None;
	SIDL_UNION_CASE(NR_UplinkTimeAlignment_Synch_Type_Auto)
		struct NR_UplinkTimeAlignment_AutoSynch_Type Auto;
} SIDL_UNION_END;

struct NR_DcchDtchConfigUL_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_SearchSpaceUlDciAssignment_Type, SearchSpaceAndDci);
	SIDL_OPTIONAL_OF_STRUCT(NR_UplinkTimeAlignment_Synch_Type, PUCCH_Synch);
	SIDL_OPTIONAL_OF_STRUCT(UL_GrantConfig_Type, GrantConfig);
};

SIDL_UNION_ENUM(NR_DrxCtrl_Type) {
	NR_DrxCtrl_Type_UNBOUND_VALUE,
	NR_DrxCtrl_Type_None,
	NR_DrxCtrl_Type_Config
};
SIDL_UNION_BEGIN(NR_DrxCtrl_Type) {
	SIDL_UNION_CASE(NR_DrxCtrl_Type_None)
		Null_Type None;
	SIDL_UNION_CASE(NR_DrxCtrl_Type_Config)
		struct NR_ASN1_DRX_Config_Type Config;
} SIDL_UNION_END;

SIDL_UNION_ENUM(NR_MeasGapCtrl_Type) {
	NR_MeasGapCtrl_Type_UNBOUND_VALUE,
	NR_MeasGapCtrl_Type_None,
	NR_MeasGapCtrl_Type_Config
};
SIDL_UNION_BEGIN(NR_MeasGapCtrl_Type) {
	SIDL_UNION_CASE(NR_MeasGapCtrl_Type_None)
		Null_Type None;
	SIDL_UNION_CASE(NR_MeasGapCtrl_Type_Config)
		struct NR_ASN1_MeasGapConfig_Type Config;
} SIDL_UNION_END;

struct NR_DcchDtchConfig_Type {
	SIDL_OPTIONAL_OF_STRUCT(NR_DcchDtchConfigDL_Type, DL);
	SIDL_OPTIONAL_OF_STRUCT(NR_DcchDtchConfigUL_Type, UL);
	SIDL_OPTIONAL_OF_STRUCT(NR_DrxCtrl_Type, DrxCtrl);
	SIDL_OPTIONAL_OF_STRUCT(NR_MeasGapCtrl_Type, MeasGapCtrl);
};
